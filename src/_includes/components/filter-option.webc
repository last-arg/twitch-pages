<label class="filter-option" :for="'check-' + name">
  <input
    type="checkbox" :id="'check-' + name"
    :data-attr-checked="`$settings.general.show_${name}s`"
  >
  <span webc:nokeep @text="name[0].toUpperCase() + name.slice(1) + 's'"></span>
  (<span :data-signals="`{${name}: 0}`" :data-text="`$${name}`">0</span>)
</label>
<style>
.filter-option {
  display: flex;
  align-items: center;
  color: var(--text5);
  background-color: var(--surface10);
  border-radius: var(--radius-3) var(--radius-6) var(--radius-6) var(--radius-3);
  padding-block: 4px;
  padding-inline: 4px var(--space-xs);
}

.filter-option input {
  appearance: none;
  margin: 0;
  /* For iOS that is smaller than version 15 to remove gradient background */
  background-color: white;
  color: currentColor;
  height: 1.68em;
  width: 1.68em;
  border-radius: var(--radius-1);
  display: grid;
  place-content: center;
  margin-inline-end: var(--space-2xs);
}

.filter-option input::before {
  content: '';
  height: 1.1em;
  width: 1.1em;
  transform-origin: center;
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
  background-color: var(--surface14);
  transform: scale(0);
}

.filter-option input:checked::before {
  transform: scale(1);
}

.filter-option:is(:hover, :focus-within) {
  background: var(--surface11);
}
</style>
<script>
class FormFilter extends HTMLElement {
    constructor() {
        super();
        this.$ = {
            form: /** @type {HTMLFormElement} */ (this.querySelector(".search-form")),
        }
        const style = document.createElement('style');
        this.insertAdjacentElement('afterend', style);
        this.css_sheet = /** @type {CSSStyleSheet} */ (style.sheet);
    }

    /** @param {Event} ev */
    handleEvent(ev) {
        switch (ev.type) {
        case "submit": {
            ev.preventDefault();
            break;
        }
        case "reset": {
            this.css_sheet.deleteRule(0)
            break;
        }
        case "input": {
            if (this.css_sheet.cssRules.length > 0) {
                this.css_sheet.deleteRule(0)
            }
            // @ts-ignore
            const value = /** @type {string} */ (ev.target.value).trim();
            if (value.length > 0) {
                this.css_sheet.insertRule(`.output-list > :not(li[data-title*='${encodeURIComponent(value)}' i]) { display: none !important }`, 0);
            }
            break;
        }
        }
    }

    connectedCallback() {
        this.$.form.addEventListener("input", this);
        this.$.form.addEventListener("submit", this);
        this.$.form.addEventListener("reset", this);
    }

    disconnectedCallback() {
        this.$.form.removeEventListener("input", this);
        this.$.form.removeEventListener("submit", this);
        this.$.form.removeEventListener("reset", this);
    }
}

customElements.define("form-filter", FormFilter)
</script>
