
.menu-item {
  display: block;
  height: 100%;
  font-size: var(--step--1);
  text-decoration: none;
  --_bg-item: var(--gray-10);
  background-color: var(--_bg-item);
  color: var(--bg);
  padding-block-start: var(--space-3xs);
  padding-inline: var(--space-2xs);
  --border-color: var(--_bg-item);
  border-bottom: var(--space-3xs) solid var(--border-color);
  cursor: pointer;
}

.menu-item:hover,
.menu-item:focus {
  --border-color: var(--gray-7);
}

.menu-item[aria-expanded=true] {
  border-bottom-color: var(--violet-8);
}

.menu-item svg {
  width: 1.2em;
  height: 1.2em;
  display: block;
}


.search-feedback {
  position: absolute;
  top: 40px;
  left: 0;
  right: 0;
  z-index: 1;
  text-align: center;
  display: flex;
  justify-content: center;
}

.search-feedback p {
  background: var(--color-truegray-300);
  padding: var(--space-3xs) var(--space-2xs);
  font-size: var(--step--1);
}


scroll-container {
  padding-block: var(--space-s);
  overflow: hidden;
  position: relative;
}

scroll-container::after {
  --shadow-top: 0 2em 1em -1em #404040 inset;
  --shadow-bottom: 0 -2em 1em -1em #404040 inset;
  --box-shadow: none;
  inset: var(--space-s) 0;
  pointer-events: none;
  position: absolute;
  content: '';
  box-shadow: var(--box-shadow);
}

scroll-container[data-scroll-shadow=top]::after {
  --box-shadow: var(--shadow-top);
}

scroll-container[data-scroll-shadow=bottom]::after {
  --box-shadow: var(--shadow-bottom);
}

scroll-container[data-scroll-shadow=both]::after {
  --box-shadow: var(--shadow-top), var(--shadow-bottom);
}

.scrollbox {
  height: 100%;
  overflow: auto;
}


follow-star {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background: var(--color-truegray-800);
  line-height: 1;
  padding: var(--space-3xs) var(--space-2xs);
  color: var(--color-truegray-400);
}

scroll-container follow-star {
  margin-inline-start: 1px;
}

follow-star a {
  color: inherit;
}

follow-star a:hover,
follow-star a:focus {
  color: var(--color-violet-500);
}


.button-follow {
  padding: 0;
  background: transparent;
  color: var(--color-truegray-400);
}

.button-follow:focus,
.button-follow:hover {
  color: var(--color-violet-700);
}

.button-follow use { display: none; }

/*
 * Could also use '... use:first-child' or '... use:nth-child(2)' if order
 * is known and won't change. Might be safer choice because svg icon name
 * might change. Although somebody might also change <use> order without
 * knowing order is important. In both cases a comment might be helpful.
 * 
 * Adding a class probably be the safest bet. Choosing a solution comes
 * down to how often and how the HTML code might be changed.
 * 
 * Could also write some defensive CSS which indicates that something is
 * wrong.
 */
.button-follow use[href$="star-empty"],
.button-follow[data-is-followed="false"] use[href$="star-empty"],
.button-follow[data-is-followed="true"] use[href$="star-full"] {
  display: initial;
}


.link-box {
  display: flex;
  background: var(--color-truegray-800);
  border-left: var(--space-3xs) solid var(--color-truegray-800);
  padding-inline-start: var(--space-3xs);
  text-decoration: none;
  color: var(--color-truegray-300);
  width: 100%;
}

.link-box img {
  width: 3.3rem;
}

.link-title {
  padding: var(--space-3xs) var(--space-2xs);
  font-size: var(--step--1);
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  position: relative;
}

.link-title p {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
}


.link-box:hover,
.link-box:focus {
  border-left-color: var(--color-violet-700);
  color: var(--color-truegray-50);
}

.link-box[data-card=category] .link-title p {
  -webkit-line-clamp: 2;
}

.link-box[data-card=user-videos] .link-title p {
  -webkit-line-clamp: 1;
}

.link-box[data-card=user-videos] img {
  width: 4rem;
}


.sidebar-header h2 {
  display: flex;
  align-items: center;
  gap: var(--space-3xs);
  font-size: var(--step--1);
  background-color: var(--color-violet-700);
  color: var(--color-truegray-100);
  padding: var(--space-3xs) var(--space-2xs);
}

.sidebar-header svg {
  width: 1.2em;
  height: 1.2em;
}

.btn-close {
  display: flex;
  align-items: center;
  background-color: var(--color-violet-700);  
  color: var(--color-truegray-100);
  padding: var(--space-3xs) var(--space-2xs);
  opacity: .7;
}

.btn-close:hover,
.btn-close:focus {
  opacity: 1;
}

.btn-close svg {
  width: 0.9em;
  height: 0.9em;
}

.user-count {
  position: absolute;
  bottom: 0;
  left: 0;
  margin: var(--space-3xs);
  background-color: var(--color-truegray-800);
  color: var(--color-truegray-100);
  padding-inline: var(--space-3xs);
  font-size: var(--step--2);
}

.stream-title {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.user-link {
  color: var(--color-truegray-800);
  text-decoration: none;
}

.user-link:focus,
.user-link:hover {
  color: var(--color-violet-700);
  text-decoration: underline;
}

.user-info {
  display: flex;
}

.external-video {
  font-size: var(--step--1);
}


.btn-frame {
  display: block;
  text-align: center;
  width: 100%;
  background: transparent;
  --border-color: var(--color-violet-700);
  border: 2px solid var(--border-color);
  max-width: initial;
  font-size: var(--step--1);
  padding-block: var(--space-3xs);
}

.btn-load-more,
.msg-no-more,
.msg-loading {
  display: none;
}

.msg-no-more,
.msg-loading {
  --border-color: var(--color-truegray-300);
  color: var(--color-truegray-500)
}

.btn-load-more[aria-disabled=false],
.btn-load-more[aria-disabled=true] + .msg-loading {
  display: block;
}

.btn-load-more:focus,
.btn-load-more:hover {
  background: var(--color-violet-700);
  color: var(--color-truegray-50);
}

.req-param[name="after"]:not([value]) ~ * {
  display: none;
}

.req-param[name="after"]:not([value]) ~ .msg-no-more {
  display: block;
}


.button-follow {
  padding: 0;
  background: transparent;
  color: var(--color-truegray-400);
}

.button-follow:focus,
.button-follow:hover {
  color: var(--color-violet-700);
}

.button-follow use { display: none; }

/*
 * Could also use '... use:first-child' or '... use:nth-child(2)' if order
 * is known and won't change. Might be safer choice because svg icon name
 * might change. Although somebody might also change <use> order without
 * knowing order is important. In both cases a comment might be helpful.
 * 
 * Adding a class probably be the safest bet. Choosing a solution comes
 * down to how often and how the HTML code might be changed.
 * 
 * Could also write some defensive CSS which indicates that something is
 * wrong.
 */
.button-follow use[href$="star-empty"],
.button-follow[data-is-followed="false"] use[href$="star-empty"],
.button-follow[data-is-followed="true"] use[href$="star-full"] {
  display: initial;
}


.heading-link a {
  --icon-color: var(--gray-5);
  background:white;
  display:flex;
  align-items: center;
  font-size: var(--heading-size);
  justify-items: center;
  color: var(--fg);
  text-decoration: none;
}

.heading-link a:focus,
.heading-link a:hover {
  --hover-color: var(--violet-8);
  --icon-color: var(--hover-color);
  text-decoration: underline;
  color: var(--hover-color)
}

.heading-link img {
  margin-inline-end: var(--space-xs);
}

.heading-link svg {
  margin-inline: var(--space-2xs) var(--space-xs);
  color: var(--icon-color);
}

.game {
  display: flex;
  background: white;
  padding: 2px;
}
.game-link {
  display: flex;
  flex-grow: 1;
  align-items: center;
  text-decoration: none;
  color: var(--color-truegray-800);
}

.game-link:focus,
.game-link:hover {
  color: var(--color-violet-700);
  text-decoration: underline;
}

.game-link p {
  padding-inline: var(--space-xs);
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
  overflow: hidden;
}

.game-link img {
  width: 4rem;
}

.game-actions {
  flex: 0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background: var(--color-truegray-100);
  padding: var(--space-3xs) var(--space-2xs);
}

.external-link {
  color: var(--color-truegray-400);
}

.external-link:is(:hover, :focus) {
  color: var(--color-violet-700);
}


.btn-frame {
  display: block;
  text-align: center;
  width: 100%;
  background: transparent;
  --border-color: var(--color-violet-700);
  border: 2px solid var(--border-color);
  max-width: initial;
  font-size: var(--step--1);
  padding-block: var(--space-3xs);
}

.btn-load-more,
.msg-no-more,
.msg-loading {
  display: none;
}

.msg-no-more,
.msg-loading {
  --border-color: var(--color-truegray-300);
  color: var(--color-truegray-500)
}

.btn-load-more[aria-disabled=false],
.btn-load-more[aria-disabled=true] + .msg-loading {
  display: block;
}

.btn-load-more:focus,
.btn-load-more:hover {
  background: var(--color-violet-700);
  color: var(--color-truegray-50);
}

.req-param[name="after"]:not([value]) ~ * {
  display: none;
}

.req-param[name="after"]:not([value]) ~ .msg-no-more {
  display: block;
}


.button-follow {
  padding: 0;
  background: transparent;
  color: var(--color-truegray-400);
}

.button-follow:focus,
.button-follow:hover {
  color: var(--color-violet-700);
}

.button-follow use { display: none; }

/*
 * Could also use '... use:first-child' or '... use:nth-child(2)' if order
 * is known and won't change. Might be safer choice because svg icon name
 * might change. Although somebody might also change <use> order without
 * knowing order is important. In both cases a comment might be helpful.
 * 
 * Adding a class probably be the safest bet. Choosing a solution comes
 * down to how often and how the HTML code might be changed.
 * 
 * Could also write some defensive CSS which indicates that something is
 * wrong.
 */
.button-follow use[href$="star-empty"],
.button-follow[data-is-followed="false"] use[href$="star-empty"],
.button-follow[data-is-followed="true"] use[href$="star-full"] {
  display: initial;
}

.user-live {
  font-size: var(--step--2);
}

.user-live span {
  background-color: var(--red-4);
  border-radius: var(--radius-1);
  color: var(--bg);
  padding-inline: var(--space-3xs);
}


.btn-frame {
  display: block;
  text-align: center;
  width: 100%;
  background: transparent;
  --border-color: var(--color-violet-700);
  border: 2px solid var(--border-color);
  max-width: initial;
  font-size: var(--step--1);
  padding-block: var(--space-3xs);
}

.btn-load-more,
.msg-no-more,
.msg-loading {
  display: none;
}

.msg-no-more,
.msg-loading {
  --border-color: var(--color-truegray-300);
  color: var(--color-truegray-500)
}

.btn-load-more[aria-disabled=false],
.btn-load-more[aria-disabled=true] + .msg-loading {
  display: block;
}

.btn-load-more:focus,
.btn-load-more:hover {
  background: var(--color-violet-700);
  color: var(--color-truegray-50);
}

.req-param[name="after"]:not([value]) ~ * {
  display: none;
}

.req-param[name="after"]:not([value]) ~ .msg-no-more {
  display: block;
}


.button-follow {
  padding: 0;
  background: transparent;
  color: var(--color-truegray-400);
}

.button-follow:focus,
.button-follow:hover {
  color: var(--color-violet-700);
}

.button-follow use { display: none; }

/*
 * Could also use '... use:first-child' or '... use:nth-child(2)' if order
 * is known and won't change. Might be safer choice because svg icon name
 * might change. Although somebody might also change <use> order without
 * knowing order is important. In both cases a comment might be helpful.
 * 
 * Adding a class probably be the safest bet. Choosing a solution comes
 * down to how often and how the HTML code might be changed.
 * 
 * Could also write some defensive CSS which indicates that something is
 * wrong.
 */
.button-follow use[href$="star-empty"],
.button-follow[data-is-followed="false"] use[href$="star-empty"],
.button-follow[data-is-followed="true"] use[href$="star-full"] {
  display: initial;
}


.heading-link a {
  --icon-color: var(--gray-5);
  background:white;
  display:flex;
  align-items: center;
  font-size: var(--heading-size);
  justify-items: center;
  color: var(--fg);
  text-decoration: none;
}

.heading-link a:focus,
.heading-link a:hover {
  --hover-color: var(--violet-8);
  --icon-color: var(--hover-color);
  text-decoration: underline;
  color: var(--hover-color)
}

.heading-link img {
  margin-inline-end: var(--space-xs);
}

.heading-link svg {
  margin-inline: var(--space-2xs) var(--space-xs);
  color: var(--icon-color);
}

