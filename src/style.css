@tailwind base;

:root {
  --measure: 60ch;
}

/*
html {
  font-size: calc(1rem + 0.5vw);
}
*/

img {
  width: 100%;
}

@tailwind components;

.contain-content {
  contain: content
}

.contain-strict {
  contain: strict
}

.stack-m-4 {
  --space: 1rem
}

.stack-m-0 {
  --space: 0
}

.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

/* To deal with template elements */
.stack > template + *,
.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--space, 1.5rem);
}

/*
If last row isn't filled with items the item(s) will all the space they can.
Usually this isn't wanted behaviour. To make things visually balanced we could
add empty (might need to set height to 0) html elements to end of container.
Number of empty elements = max_column_count - 1
And make sure to hide the elements from accesibility tools.

Can use gap attribute for spacing instead of padding and margin if don't need
wider browser support
*/
.flex-grid {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--grid-gap, 1rem) * -0.5);
}

/*
If you have element inside grid item that makes grid item wider than wanted then
you can set overflow: hidden to grid item to fix it.
For example if you have white-space: nowrap on some element (to truncate it).
*/
.flex-grid > * {
  flex: 1 1 var(--grid-min, 20rem);
  padding: calc(var(--grid-gap, 1rem) * 0.5);
}

.grid {
  display: grid;
  grid-gap: var(--grid-gap, 1rem);
  /*
    This will produce horizontal scrollbar when going below minimum value (--grid-min).
    Solutions:
    1) Use CSS min function to figure out if provided value or 100% is smaller.
    2) For wider browser support can manually write media query that changes
       attribute grid-template-columns value.
  */
  grid-template-columns: repeat(auto-fit, minmax(var(--grid-min, 20rem), 1fr));
}

@supports (width: min(250px, 100%)) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(var(--grid-min, 20rem), 100%), 1fr));
  }
}

.filler-item {
  display: block !important;
  height: 0;
  padding: 0 !important;
}

.grid-min-72 {
  --grid-min: 18rem
}

.grid-min-64 {
  --grid-min: 16rem
}

.grid-gap-6 {
  --grid-gap: 1.5rem
}

.cover {
  display: flex;
  flex-direction: column;
}
.cover > h1 {
  margin-top: auto;
  margin-bottom: auto;
}

.cover > * {
  margin-top: 1rem;
  margin-bottom: 1rem;
}
.cover > h1 {
  margin-top: auto;
  margin-bottom: auto;
}
.cover > :first-child:not(h1) {
  margin-top: 0;
}
.cover > :last-child:not(h1) {
  margin-bottom: 0;
}

.switcher {
  --threshold: 1rem;
  --space: 1rem;
  --large: calc(1 + 7 / 10);
}

.switcher > * {
  display: flex;
  flex-wrap: wrap;
  /* ↓ Multiply by -1 to make negative */
  margin: calc(var(--space) / 2 * -1);
}

.switcher > * > * {
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: calc((var(--threshold) - (100% - var(--space))) * 999);
  /* ↓ Half the value to each element, combining to make the whole */
  margin: calc(var(--space) / 2);
}

.icon {
  /* 0.75 is about the height of tall characters */
  /* for small characters can use 1ex unit which is height of letter 'x' */
  height: 0.75em;
  width: 0.75em;
}


.search-wrapper {
  @apply ml-auto mr-4 border-b-5 border-gray-900;
}

.search-wrapper:focus-within {
  @apply border-violet-700;
}

.sidebar-button {
  @apply mr-4 text-gray-200 block bg-gray-900 px-3 pt-1.5 pb-0.5 border-b-5 border-gray-900 block h-full;
}

.sidebar-button:focus,
.sidebar-button:hover {
  @apply text-gray-50 text-gray-50 border-gray-500;
}

.sidebar-button[aria-expanded="true"] {
  @apply border-violet-700;
}

.sidebar-wrapper {
  @apply h-screen pt-11 pb-2 absolute top-0 left-full max-w-xs w-full -z-10;
  transition: visibility 150ms, opacity 150ms, transform 150ms;
}

[aria-expanded="false"] ~ .sidebar-wrapper {
  @apply translate-x-0 opacity-0 invisible;
}

[aria-expanded="true"] ~ .sidebar-wrapper {
  @apply -translate-x-full opacity-100 visible;
}

.skip-content {
  @apply absolute z-20 p-4 bg-white border border-trueGray-700 underline left-0;
  bottom: calc(100% + 1rem);
}

.skip-content:focus {
  @apply bottom-auto;
}

.scrollbox {
  @apply h-full overflow-auto;
}

.scroll-shadow {
  bottom: 0;
  left: 0;
  pointer-events: none;
  position: absolute;
  right: 0;
  top: 0;
  transition: all .2s ease-out;
}

.has-top-shadow .scroll-shadow-top {
  box-shadow: 0 2em 1em -1em theme('colors.trueGray.700') inset;
}

.has-bottom-shadow .scroll-shadow-bottom {
  box-shadow: 0 -2em 1em -1em theme('colors.trueGray.700') inset;
}

.load-more-btn.htmx-request {
  display: none;
}

.load-more-msg {
  @apply border-2 py-1 border-trueGray-300 text-trueGray-500;
}

.htmx-request + .load-more-msg {
  display: block;
}

.filter-checkbox-btn {
  @apply p-1 border-r-2 border-trueGray-50;
}

.filter-checkbox-btn.archive.checked > span {
  @apply bg-lime-300;
}

.filter-checkbox-btn.upload.checked > span {
  @apply bg-sky-300;
}

.filter-checkbox-btn.highlight.checked > span {
  @apply bg-amber-300;
}

.filter-only-btn {
  @apply whitespace-nowrap px-3
}

.user-videos > li {
  display: none;
}

.user-videos.show-highlights > .highlight,
.user-videos.show-uploads > .upload,
.user-videos.show-archives > .archive {
  display: block;
}

.filter-wrapper {
  @apply sticky z-10;
  /* TODO: remove hardcoded number */
  top: 37px;
  border-bottom: 1rem solid;
  border-image: linear-gradient(theme('colors.trueGray.50'), transparent) 100;
}

.title-setting {
  @apply text-xl text-trueGray-400;
}

.btn {
  @apply py-1 px-2 rounded-sm;
}

.btn-setting {
  @apply bg-indigo-300 text-black;
}

.btn-setting:hover {
  @apply bg-indigo-400;
}

.list-general {
  width: max-content;
}
.list-general > li {
  @apply flex;
}
.list-general label {
  @apply flex-grow mr-4;
}

.list-general input {
  @apply w-20;
}

#main input {
  @apply border border-black px-1;
}

.btn-twitch {
  @apply bg-violet-600 text-trueGray-100 inline-block;
}

.btn-twitch:hover {
  @apply bg-violet-800;
}

@tailwind utilities;

.min-w-22ch {
  min-width: 22ch;
}

.max-w-30ch {
  max-width: 30ch
}

.fade-in {
  animation-name: fadein;
  animation-duration: 300ms;
}

@keyframes fadein {
  from { opacity: 0 }
  to { opacity: 1 }
}

